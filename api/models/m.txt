import database from "../config/index.js";



const storeSchema = new database.Schema({
  name: { type: String, required: true },
  location: String,
  departments: [{ type: database.Schema.Types.ObjectId, ref: 'Department' }],
  products: [{ type: database.Schema.Types.ObjectId, ref: 'Product' }],
  customers: [{ type: database.Schema.Types.ObjectId, ref: 'Customer' }],
  tickets: [{ type: database.Schema.Types.ObjectId, ref: 'Ticket' }],
  invoices: [{ type: database.Schema.Types.ObjectId, ref: 'Invoice' }],
  cashClosures: [{ type: database.Schema.Types.ObjectId, ref: 'CashClosure' }],
  promotions: [{ type: database.Schema.Types.ObjectId, ref: 'Promotion' }],
  inventory: { type: database.Schema.Types.ObjectId, ref: 'Inventory' },
  generalConfiguration: { type: database.Schema.Types.ObjectId, ref: 'GeneralConfiguration' },
  loyaltyProgram: { type: database.Schema.Types.ObjectId, ref: 'LoyaltyProgram' },
  taxConfiguration: { type: database.Schema.Types.ObjectId, ref: 'TaxConfiguration' },
  alertConfiguration: { type: database.Schema.Types.ObjectId, ref: 'AlertConfiguration' },
  trainingProgram: { type: database.Schema.Types.ObjectId, ref: 'TrainingProgram' },
  createdAt: { type: Date, default: Date.now }
});



const {Schema} = database
const alertConfigurationSchema = new Schema({
  alertType: { type: String, required: true },
  message: { type: String, required: true },
});
const alertConfigurationSchema = new Schema({
  alertType: { type: String, required: true },
  message: { type: String, required: true },
});
const cashClosureSchema = new Schema({
  cashier: { type: Schema.Types.ObjectId, ref: 'Cashier' },
  startAmount: { type: Number, required: true },
  endAmount: { type: Number, required: true },
  closedAt: { type: Date, default: Date.now },
});
const cashierSchema = new Schema({
  name: { type: String, required: true },
  shiftStart: { type: Date, default: Date.now },
  shiftEnd: { type: Date },
});
const customerSchema = new Schema({
  name: { type: String, required: true },
  email: { type: String, unique: true, required: true },
  phone: String,
  address: String,
});
const customerHistorySchema = new Schema({
  customer: { type: Schema.Types.ObjectId, ref: 'Customer' },
  events: [{ type: String }],
  date: { type: Date, default: Date.now },
});
const departmentSchema = new Schema({
    name: { type: String, required: true },
    description: String,
  });
  const Department = database.model('Department', departmentSchema);
  const discountHistorySchema = new Schema({
  user: { type: Schema.Types.ObjectId, ref: 'User' },
  discount: { type: Number, required: true },
  date: { type: Date, default: Date.now },
});
const generalConfigurationSchema = new Schema({
  key: { type: String, unique: true, required: true },
  value: { type: Schema.Types.Mixed, required: true },
});
const inventorySchema = new Schema({
  product: { type: Schema.Types.ObjectId, ref: 'Product' },
  quantity: { type: Number, default: 0 },
});
const inventoryKardexSchema = new Schema({
  inventory: { type: Schema.Types.ObjectId, ref: 'Inventory' },
  movements: [{ type: Schema.Types.ObjectId, ref: 'InventoryMovement' }],
});
const inventoryMovementSchema = new Schema({
  inventory: { type: Schema.Types.ObjectId, ref: 'Inventory' },
  type: { type: String, enum: ['IN', 'OUT'], required: true },
  quantity: { type: Number, required: true },
  date: { type: Date, default: Date.now },
});
const invoiceSchema = new Schema({
  ticket: { type: Schema.Types.ObjectId, ref: 'Ticket' },
  amount: { type: Number, required: true },
  issuedAt: { type: Date, default: Date.now },
});
const loyaltyProgramSchema = new Schema({
  name: { type: String, required: true },
  pointsPerDollar: { type: Number, required: true },
});
const loyaltyTransactionSchema = new Schema({
  customer: { type: Schema.Types.ObjectId, ref: 'Customer' },
  points: { type: Number, required: true },
  date: { type: Date, default: Date.now },
});
const paymentHistorySchema = new Schema({
  user: { type: Schema.Types.ObjectId, ref: 'User' },
  amount: { type: Number, required: true },
  date: { type: Date, default: Date.now },
});
const productSchema = new Schema({
  name: { type: String, required: true },
  description: String,
  price: { type: Number, required: true },
  stock: { type: Number, default: 0 },
  department: { type: Schema.Types.ObjectId, ref: 'Department' },

});
const promotionSchema = new Schema({
  name: { type: String, required: true },
  description: String,
  discount: { type: Number, required: true },
  startDate: { type: Date, required: true },
  endDate: { type: Date, required: true },
});
const roleSchema = new Schema({
  name: { type: String, required: true },
  permissions: [String],
});
const salesReportSchema = new Schema({
  date: { type: Date, default: Date.now },
  totalSales: { type: Number, required: true },
  itemsSold: { type: Number, required: true },
});
const serviceSchema = new Schema({
  name: { type: String, required: true },
  description: String,
  price: { type: Number, required: true },
});
const serviceInventorySchema = new Schema({
  service: { type: Schema.Types.ObjectId, ref: 'Service' },
  quantity: { type: Number, default: 0 },
});
const sessionSchema = new Schema({
  user: { type: Schema.Types.ObjectId, ref: 'User' },
  token: { type: String, required: true },
  createdAt: { type: Date, default: Date.now },
  expiresAt: { type: Date, required: true },
});
const taxConfigurationSchema = new Schema({
  name: { type: String, required: true },
  rate: { type: Number, required: true },
});
const ticketSchema = new Schema({
  customer: { type: Schema.Types.ObjectId, ref: 'Customer' },
  cashier: { type: Schema.Types.ObjectId, ref: 'Cashier' },
  details: [{ type: Schema.Types.ObjectId, ref: 'TicketDetail' }],
  totalAmount: { type: Number, required: true },
  createdAt: { type: Date, default: Date.now },
});
const ticketDetailSchema = new Schema({
  ticket: { type: Schema.Types.ObjectId, ref: 'Ticket' },
  product: { type: Schema.Types.ObjectId, ref: 'Product' },
  quantity: { type: Number, required: true },
  price: { type: Number, required: true },
});
const trainingProgramSchema = new Schema({
  name: { type: String, required: true },
  description: String,
  duration: { type: Number, required: true },
});
const userSchema = new Schema({
  username: { type: String, unique: true, required: true },
  password: { type: String, required: true },
  role: { type: Schema.Types.ObjectId, ref: 'Role' },
  active: { type: Boolean, default: true },
});